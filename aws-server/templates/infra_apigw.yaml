AWSTemplateFormatVersion: "2010-09-09"
Resources:
  NoteRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub ${Env}-note-api
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body:
        swagger: "2.0"
        info:
          version: "1.0.0"
        x-amazon-apigateway-request-validators:
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
          all:
            validateRequestBody: true
            validateRequestParameters: true
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          ACCESS_DENIED:
            statusCode: 403
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: >
                {"message":"$context.authorizer.message"}
        paths:
          /users:
            get:
              x-amazon-apigateway-request-validator: params-only
              parameters:
              - in: query
                name: organization_id
                type: number
                required: false
              - in: query
                name: last_evaluated_key
                type: string
                required: false
              x-amazon-apigateway-integration:
                type: 'aws'
                connectionType: 'INTERNET'
                uri: !Sub
                - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
                - { lambdaArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Env}-note-get-users' }
                httpMethod: 'POST'
                passthroughBehavior: "WHEN_NO_TEMPLATES"
                requestTemplates:
                  application/json: |
                    {
                      #if( "$input.params('organization_id')" != "" )
                        "organization_id": "$input.params('organization_id')"
                      #end
                      #if( "$input.params('last_evaluated_key')" != "" )
                        ,"last_evaluated_key": $util.urlDecode($input.params('last_evaluated_key'))
                      #end
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
                  "^\\[BadRequest\\].*":
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
                  "^\\[NotFound\\].*":
                    statusCode: "404"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
                  "^\\[InternalServerError\\].*":
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        $input.json('$')
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: Invalid Request
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: NotFound
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: InternalServerError
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              summary: CORS support
              consumes:
              - application/json
              produces:
              - application/json
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
  GetNoteUsersInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${Env}-note-get-users
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NoteRestApi}/*/GET/*"
